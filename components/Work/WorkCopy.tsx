import { useEffect, useRef, useState } from "react";
import Elements from "./Elements";
import s from "./work.module.scss";
import { data as importedData } from "@/components/Work/data";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
// import { WorkHeading } from "../Svg/Svg";
import Image from "next/image";
import { useSnapshot } from "valtio";
import { store } from "@/store";
// import Preloader from "../Preloader/Preloader";
import { useRouter } from "next/router";
import { memo } from "react";
import Link from "next/link";
import HeadingElement from "../HeadingElementAnimation/HeadingElement";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";
import { MotionPathPlugin } from "gsap/dist/MotionPathPlugin";
gsap.registerPlugin(ScrollTrigger, MotionPathPlugin);

interface WorkData {
  id: number;
  name: string;
}

// Data array for work items
const data: WorkData[] = [
  { id: 0, name: "Bauhaus Tapete" },
  { id: 1, name: "Everphone" },
  { id: 2, name: "Monipol" },
  { id: 3, name: "Myndyoga" },
  { id: 4, name: "Vermietet.de" },
  { id: 5, name: "WWTF" },
  { id: 6, name: "Thyssen-Bornemisza" },
];

// Define a mapping of ids to paths
const workPaths: { [key: number]: string } = {
  0: "/work/bauhas",
  1: "/work/everphone",
  2: "/work/monipol",
  3: "/work/myndyoga",
  4: "/work/vermietet",
  5: "/work/wwtf",
  6: "/work/Thyssen",
};

const Work = () => {
  const container = useRef<HTMLElement>(null);
  const heading = useRef<HTMLDivElement>(null);
  const [counter, setCounter] = useState<number>(1);
  // const [loading, setLoading] = useState(false);
  const router = useRouter();
  const elementImages = ["1.svg", "2.svg", "3.svg", "4.svg", "5.svg", "6.svg", "7.svg", "8.svg"];
  const mm = gsap.matchMedia(); // GSAP MatchMedia Instance
  const elementAnimation = useRef<SVGSVGElement>(null);
  useGSAP(() => {
    mm.add("(min-width: 800px)", () => {
      // Animation for desktop only
      setTimeout(() => {
        if (elementAnimation.current) {
          let tl = gsap.timeline({
            defaults: { ease: "none" },
            scrollTrigger: {
              trigger: elementAnimation.current,
              start: "top center",
              toggleActions: "play none reverse none",
            },
          });
          tl.to('.workSvg .shape', {
            scale: 1,
            stagger: 0.5
          }).to(".workSvg .shape", {
            motionPath: {
              path: ".workSvg #path",
              align: ".workSvg #path",
              alignOrigin: [0.5, 0.5],
              autoRotate: true,
            },
            duration: 5,
            ease: "circ.in",
            stagger: 0.5,
          }, "<")
        }
      }, 1500);
    });
  }, { scope: elementAnimation });

  useEffect(() => {
    if (heading.current) {
      const words = heading.current.querySelectorAll(".word");

      words.forEach((word, index) => {
        const letters = word.querySelectorAll(".letter");

        const tl = gsap.timeline({
          scrollTrigger: {
            trigger: heading.current,
            start: "top 90%",
            end: "bottom top",
            scrub: true,
          },
        });

        tl.fromTo(
          word,
          {
            opacity: 0,
            rotationZ: 0,
            rotationY: -90,
            transformPerspective: 1000,
            transformOrigin: "50% 50%",
          },
          {
            opacity: 1,
            rotationY: 0,
            rotationZ: 0,
            duration: 1.0,
            ease: "power3.out",
            delay: index * 0.6,
          }
        )
          .to(word, {
            rotationY: 89,
            rotationZ: 8,
            opacity: 1,
            duration: 2.0,
            ease: "power3.out",
            delay: 0.5,
          })

          .fromTo(
            letters,
            {
              opacity: 0,
              rotationY: -90,
              transformPerspective: 1000,
              transformOrigin: "50% 50%",
            },
            {
              opacity: 1,
              rotationY: 0,
              stagger: {
                each: 0.1,
                from: "end",
              },
              duration: 1,
              ease: "power3.out",
            },
            0
          );
      });
    }
  }, []);

  useGSAP(
    () => {
      let mm = gsap.matchMedia();

      mm.add(
        { isDesktop: `(min-width: 800px)`, isMobile: `(max-width: 799px)` },
        (context) => {
          let { isDesktop } = context.conditions as { isDesktop: boolean };

          gsap
            .timeline({
              scrollTrigger: {
                trigger: container.current!,
                start: "top 40%",
                toggleActions: "play none none reverse",
                fastScrollEnd: isDesktop,
                preventOverlaps: isDesktop,
              },
              defaults: {
                ease: "power1.out", // Change ease to a slower one for smoother effect
              },
            })
            .from(".work-heading path", {
              strokeDashoffset: 2340,
              duration: 2, // Increased duration
              ease: "none",
            })
            .to(".work-heading path", {
              duration: 2, // Increased duration
              fill: "black",
              ease: "power1.inOut", // Adjust easing
            });

          let tl = gsap.timeline({
            scrollTrigger: {
              trigger: `.slider`,
              start: isDesktop ? "top+=100 top" : "top top",
              end: "+=20000",
              scrub: 2.5, // Slower scrub rate for smoother scrolling effect
              pin: true,
              pinSpacing: true,
            },
            defaults: { ease: "none" }, // Use slower easing
          });

          data.forEach((_, i) => {
            tl.call(() => setCounter(i + 1))
              .to(`.slide-${i - 1}`, { yPercent: -100 })
              .from(`.slide-${i}`, { yPercent: i === 0 ? 0 : 100, duration: 2 }, "<")
              .from(`.work-path-${i + 1}`, {
                scale: 0,
                duration: 2.5, // Increased duration for slower scaling effect
                ease: "none", // Slower easing
              })
              .from(
                `.image-${i}`,
                {
                  left: isDesktop ? "110%" : "80%",
                  top: isDesktop ? "60%" : "100%",
                  rotate: -40,
                  duration: 9.5, // Increased duration for slower movement
                },
                "<"
              )
              // .from(
              //   `.heading-${i}`,
              //   {
              //     scale: 1,
              //     duration: 1.5, // Slightly slower
              //     ease: "none", // Adjust easing
              //   },
              //   "-=10"
              // ) // Heading animation starts with image animation
              .to(`.element-${i} .svgImageElement`, {
                motionPath: {
                  path: `.element-${i} #workPath-${i}`,
                  align: `.element-${i} #workPath-${i}`,
                  alignOrigin: [0.5, 0.5],
                  autoRotate: true,
                },
                transformOrigin: "50% 50%",
                scale: 1,
                duration: 5,
                ease: "none",
                stagger: 0.5,
              }, "<")// Image starts moving immediately
              .to(
                `.heading-${i}`,
                {
                  scale: 1.1,
                  duration: 5.5, // Slow down to match image movement
                  ease: "none",
                },
                "<"
              ) // Heading scaling happens simultaneously
              .to(`.element-${i} .svgImageElement`, {
                scale: 0,
                stagger: 0.5,
              }, "<")// Image starts moving immediately
              .call(() => setCounter(i + 1))
              .to(`.work-path-${i + 1}`, {
                scale: 0,
                duration: 1.5, // Increased duration for slower scale-down
                ease: "none",
              });
          });
        }
      );
    },
    { scope: container }
  );

  const { workHeadingPointerEnter, workHeadingPointerLeave } = useSnapshot(store);

  const handleCardClick = (id: number) => {
    const path = workPaths[id];
    if (path) {
      router.push(path);
    } else {
      console.error("Path not found for id:", id);
    }
  };

  return (
    <section id="work" ref={container} className={s.main}>
      {/* {loading && <Preloader />}  */}
      <svg className={`workSvg ${s.svgElement}`} ref={elementAnimation} width="1920" height="1080" viewBox="0 0 1920 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path id="path" className={`${s.SVGline}`} d="M332 -113.5C44.4731 -54.1626 -28.123 604.222 345.571 336.091C719.265 67.9599 1027.65 8.34432 1487.97 56.556C1801.35 127.019 2144.38 656.698 1698.85 837.678C1253.32 1018.66 1158 1002.5 997.5 941C349.5 770.742 -147.333 1150.23 -310.5 1306.5" stroke="black" />
        <path className={`shape ${s.shape}`} d="M137.55 -182.37C105.965 -107.178 141.522 -11.8251 215.419 27.0054C289.317 65.8349 391.547 43.1254 440.566 -22.8237C588.2 -221.461 232.806 -409.155 137.55 -182.37Z" fill="#FF9293" />
        <path className={`shape ${s.shape}`} d="M196.356 69.117C180.05 59.061 164.842 47.077 149.837 35.109C129.91 19.21 109.292 2.07199 100.058 -21.675C81.3688 -69.719 101.986 -157.363 136.213 -194.786C158.445 -219.098 204.65 -235.953 235.584 -246.151C271.833 -258.103 311.343 -260.406 348.611 -251.931C407.986 -238.413 460.588 -197.747 488.574 -143.704C498.342 -124.828 505.303 -104.009 504.99 -82.768C504.582 -55.057 491.882 -28.881 476.078 -6.104C448.359 33.841 409.585 66.737 364.086 83.968C318.587 101.199 266.33 101.966 221.74 82.527C212.944 78.689 204.524 74.146 196.372 69.102L196.356 69.117Z" fill="#FF82BA" />
        <path className={`shape ${s.shape}`} d="M493.407 -4.76201C486.623 11.256 476.761 26.416 462.641 36.578C445.214 49.132 423.224 52.902 402.29 57.654C355.981 68.169 310.224 85.122 262.751 83.942C215.278 82.761 163.824 57.102 151.772 11.118C138.572 -39.25 175.876 -87.165 193.012 -136.322C199.168 -153.964 202.981 -172.879 213.701 -188.192C261.051 -255.788 342.03 -193.449 398.232 -177.232C478.093 -154.194 529.118 -89.035 493.407 -4.76201Z" fill="#C19280" />
        <path className={`shape ${s.shape}`} d="M305.241 41.416C310.656 40.954 316.014 40.568 321.293 40.328C390.009 37.223 474.792 -11.841 477.609 -101.015C479.25 -153.01 476.962 -210.95 446.152 -247.856C426.883 -270.941 399.466 -281.569 372.556 -287.308C348.003 -292.543 322.556 -294.329 298.229 -287.763C234.65 -270.605 191.731 -201.972 154.607 -138.178C140.618 -114.138 126.115 -88.363 125.059 -59.143C123.383 -12.817 157.565 26.586 195.05 39.19C230.168 51 268.993 44.512 305.241 41.416Z" fill="#D6C2E4" />
        <path className={`shape ${s.shape}`} d="M467.162 -128.344C464.961 -133.481 462.35 -138.745 459.288 -144.193C441.918 -175.142 410.424 -195.987 377.321 -208.788C344.217 -221.588 308.913 -227.403 274.385 -235.631C259.696 -239.131 244.922 -243.111 229.824 -242.998C198.244 -242.758 168.584 -223.945 150.396 -198.118C132.207 -172.292 124.461 -140.269 123.177 -108.698C122.034 -80.374 126.224 -50.736 142.127 -27.267C150.636 -14.706 162.079 -4.48801 173.396 5.603C191.048 21.325 208.686 37.032 226.338 52.754C235.863 61.236 245.529 69.817 256.902 75.575C294.238 94.486 350.962 79.216 380.397 52.994C387.452 46.714 394.888 40.927 402.48 35.31C417.056 24.514 432.041 13.873 443.682 -0.197998C453.602 -12.18 461.236 -25.855 466.471 -40.505C478.38 -73.853 479.706 -98.989 467.148 -128.315L467.162 -128.344Z" fill="#FF8D7C" />
        <path className={`shape ${s.shape}`} d="M169.435 -205.607C148.818 -175.99 129.93 -144.503 120.322 -109.71C110.714 -74.918 111.159 -36.205 127.924 -4.24402C151.965 41.593 203.46 65.0269 252.202 82.339C278.731 91.765 306.571 100.469 334.55 97.357C379.842 92.322 416.03 57.618 443.47 21.2C463.003 -4.72002 480.492 -33.695 484.255 -65.94C490.402 -118.637 457.735 -169.858 414.466 -200.498C339.416 -253.643 230.234 -292.948 169.435 -205.607Z" fill="#83D398" />
        <path className={`shape ${s.shape}`} d="M464.472 -3.17603C457.726 12.736 447.919 27.796 433.879 37.891C416.55 50.362 394.683 54.108 373.867 58.828C327.818 69.273 282.318 86.114 235.112 84.942C187.906 83.769 136.741 58.28 124.757 12.599C111.63 -37.436 148.725 -85.035 165.765 -133.868C171.886 -151.394 175.678 -170.183 186.337 -185.395C233.422 -252.545 313.946 -190.618 369.832 -174.508C449.244 -151.622 499.983 -86.893 464.472 -3.17603Z" fill="#FFD95D" />
        <path className={`shape ${s.shape}`} d="M385.912 -66.1493C385.749 -69.0705 385.624 -71.9596 385.576 -74.8041C384.958 -111.831 360.288 -158.176 313.197 -160.996C285.739 -162.64 255.081 -162.256 235.115 -146.215C222.627 -136.182 216.601 -121.583 213.167 -107.185C210.035 -94.0479 208.712 -80.379 211.819 -67.1911C219.942 -32.724 255.578 -8.62201 288.744 12.29C301.242 20.17 314.649 28.352 330.078 29.348C354.539 30.927 375.874 13.108 383.094 -6.881C389.86 -25.607 387.008 -46.597 385.912 -66.1493Z" fill="#88C4D2" />
        <path className={`shape ${s.shape}`} d="M260.19 -171.974C277.3 -172.762 288.769 -155.208 296.54 -139.944C335.536 -63.3484 375.669 19.4566 363.853 104.593C271.349 119.697 176.516 120.449 83.7831 106.816C53.324 102.338 152.766 -18.3894 159.731 -29.5694C181.319 -64.2224 212.638 -169.775 260.19 -171.974Z" fill="#C19280" />
        <path className={`shape ${s.shape}`} d="M170.283 -128.537C193.075 -163.931 217.062 -199.134 248.248 -227.413C279.433 -255.692 318.809 -276.797 360.856 -278.867C388.905 -280.248 420.074 -270.942 434.106 -246.616C442.609 -231.876 443.513 -214.064 443.361 -197.047C442.7 -122.965 425.385 -47.9493 385.795 14.6707C339.988 87.1237 213.772 185.333 120.288 142.708C16.1984 95.2447 132.317 -69.5793 170.283 -128.537Z" fill="#FFD95D" />
        <path className={`shape ${s.shape}`} d="M174.164 -133.874C164.432 -133.514 153.772 -134.56 144.828 -131.747C138.156 -129.648 132.93 -126.62 127.256 -123.598C123.069 -121.368 120.006 -120.017 117.59 -116.562C114.972 -112.819 112.609 -108.235 110.693 -104.302C108.031 -98.8369 109.504 -93.2362 110.198 -87.5617C110.6 -84.2752 109.568 -81.4281 112.352 -78.4579C113.224 -77.5276 114.866 -76.8412 115.803 -75.9176C116.79 -74.9444 117.042 -73.4679 118.141 -72.5828C120.499 -70.6836 125.832 -70.942 127.739 -69.0788C129.627 -67.2329 128.283 -63.8419 128.13 -61.6393C127.379 -50.826 124.069 -38.977 131.245 -28.726C134.25 -24.4337 134.744 -19.1983 135.761 -14.5971C136.396 -11.7182 138.199 -9.24178 139.945 -6.57555C141.278 -4.53713 142.636 -2.52118 143.156 -0.318408C143.946 3.03125 142.508 2.88433 141.543 5.12002C139.168 10.6177 134.733 16.1707 133.109 21.9677C131.355 28.2248 130.548 34.2966 130.113 40.8298C129.629 48.1054 128.809 54.8715 135.199 61.4793C138.986 65.3943 144.259 68.5602 148.022 72.5655C151.797 76.5831 155.344 78.9127 160.963 81.8444C167.194 85.0951 174.212 87.4958 181.149 89.9844C188.721 92.7005 196.926 94.0055 204.221 97.0592C212.665 100.594 221.002 102.714 230.291 104.94C239.986 107.264 246.243 108.978 256.235 108.3C270.325 107.344 284.706 105.391 296.919 100.632C303 98.262 308.451 95.1828 312.654 91.3538C317.093 87.3087 318.441 82.6286 321.796 78.2643C322.568 77.2601 322.891 76.2751 322.902 75.3417C322.994 75.075 323.083 74.8063 323.172 74.5371C325.444 71.3576 327.297 67.8965 329.026 64.1355C332.895 55.7137 337.211 47.682 337.781 38.7301C338.558 26.52 338.826 14.9462 331.219 3.29267C325.771 -5.05424 322.989 -12.8831 319.886 -21.6998C315.758 -33.4305 308.11 -46.0346 307.146 -58.1288C306.947 -60.6253 307.522 -62.8018 305.886 -65.1761C302.296 -70.3924 295.908 -75.2236 291.089 -80.0073C279.845 -91.169 269.209 -101.931 252.127 -109.283C244.305 -112.651 236.516 -115.784 229.204 -119.728C222.776 -123.196 216.704 -127.914 209.249 -130.305C197.977 -133.921 186.051 -134.314 174.164 -133.874Z" fill="#FFB54E" />
        <path className={`shape ${s.shape}`} d="M125.762 40.082C159.233 97.9178 246.054 119.727 295.725 75.5211C333.731 41.6979 340.634 -14.7754 345 -65.9201C319.872 -72.7827 295.563 -53.3782 277.923 -33.9425C260.283 -14.5068 241.23 8.02681 215.269 9.81422C196.804 -17.6911 216.789 -55.1635 240.621 -78.0132C264.455 -100.863 294.514 -122.215 300.082 -155.028C300.973 -160.279 301.087 -166.005 298.396 -170.579C293.299 -179.24 281.268 -179.69 271.402 -178.54C164.6 -166.081 56.7502 -79.1652 125.762 40.082Z" fill="#ADDBD0" />
      </svg>
      <div ref={heading} className={`work-heading ${s.heading}`}>
        <div className="word">
          {"Discover".split("").map((letter, index) => (
            <span key={index} className="letter">
              {letter}
            </span>
          ))}
        </div>
        <div className="word">
          {"Latest".split("").map((letter, index) => (
            <span key={index} className="letter">
              {letter}
            </span>
          ))}
        </div>
        <div className="word">
          {"Projects".split("").map((letter, index) => (
            <span key={index} className="letter">
              {letter}
            </span>
          ))}
        </div>
      </div>

      <div className={`slider ${s.slider}`}>
        <div className={s.counter}>
          <h2>0{counter}/07</h2>
        </div>
        {data.map(({ id, name }, i) => (
          <Link
            key={id}
            href={`${workPaths[id]}`}
            className={`slide-${i} ${s.slide}`}
            onClick={() => handleCardClick(id)}
          >
            <svg className={`${s.cardElements} element-${i}`} width="1920" height="1080" viewBox="0 0 1920 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path id={`workPath-${i}`} className={`${s.svgElementPath}`} d="M-105 305.241C332 90.2408 1366 -215.059 1806 223.741C2246 662.541 1945 792.741 1601.5 951.595C1081 1153.24 -194.6 1136.8 -105 588C-48.1666 298.833 165.1 -242.5 563.5 -94.5" stroke="black" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-191.45 202.63C-223.035 277.822 -187.478 373.175 -113.581 412.005C-39.6834 450.835 62.5466 428.125 111.566 362.176C259.2 163.539 -96.1943 -24.1551 -191.45 202.63Z" fill="#FF9293" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-99.0043 142.099C-74.9143 140.689 -48.7963 154.397 -42.2283 177.617C-35.8703 200.096 -47.9323 226.93 -34.8073 246.255C-25.9483 259.298 -8.94833 263.47 6.49567 266.644C35.6147 272.628 64.7336 278.613 93.8527 284.597C109.092 287.729 125.074 291.219 136.777 301.469C163.619 324.982 153.912 369.032 136.508 400.184C118.239 432.885 93.8737 462.167 65.0387 486.076C40.5276 506.4 6.30966 523.293 -22.0923 508.9C-60.9833 489.192 -58.7383 427.209 -95.5163 403.798C-146.868 371.108 -267.252 414.335 -258.552 306.871C-253.92 249.656 -155.857 145.43 -99.0043 142.099Z" fill="#83D398" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-158.644 454.117C-174.95 444.061 -190.158 432.077 -205.163 420.109C-225.09 404.21 -245.708 387.072 -254.942 363.325C-273.631 315.281 -253.014 227.637 -218.787 190.214C-196.555 165.902 -150.35 149.047 -119.416 138.849C-83.167 126.897 -43.657 124.594 -6.38902 133.069C52.986 146.587 105.588 187.253 133.574 241.296C143.342 260.172 150.303 280.991 149.99 302.232C149.582 329.943 136.882 356.119 121.078 378.896C93.359 418.841 54.585 451.737 9.086 468.968C-36.413 486.199 -88.67 486.966 -133.26 467.527C-142.056 463.689 -150.476 459.146 -158.628 454.102L-158.644 454.117Z" fill="#FF82BA" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M138.407 380.238C131.623 396.256 121.761 411.416 107.641 421.578C90.214 434.132 68.224 437.902 47.29 442.654C0.98101 453.169 -44.776 470.122 -92.249 468.942C-139.722 467.761 -191.176 442.102 -203.228 396.118C-216.428 345.75 -179.124 297.835 -161.988 248.678C-155.832 231.036 -152.019 212.121 -141.299 196.808C-93.949 129.212 -12.97 191.551 43.232 207.768C123.093 230.806 174.118 295.965 138.407 380.238Z" fill="#C19280" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-49.759 426.416C-44.344 425.954 -38.986 425.568 -33.707 425.328C35.009 422.223 119.792 373.159 122.609 283.985C124.25 231.99 121.962 174.05 91.152 137.144C71.883 114.059 44.466 103.431 17.556 97.6921C-6.997 92.4575 -32.444 90.6713 -56.771 97.2368C-120.35 114.395 -163.269 183.028 -200.393 246.822C-214.382 270.862 -228.885 296.637 -229.941 325.857C-231.617 372.183 -197.435 411.586 -159.95 424.19C-124.832 436 -86.007 429.512 -49.759 426.416Z" fill="#D6C2E4" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M112.162 256.656C109.961 251.519 107.35 246.255 104.288 240.807C86.918 209.858 55.424 189.013 22.321 176.212C-10.783 163.412 -46.087 157.597 -80.615 149.369C-95.304 145.869 -110.078 141.889 -125.176 142.002C-156.756 142.242 -186.416 161.055 -204.604 186.882C-222.793 212.708 -230.539 244.731 -231.823 276.302C-232.966 304.626 -228.776 334.264 -212.873 357.733C-204.364 370.294 -192.921 380.512 -181.604 390.603C-163.952 406.325 -146.314 422.032 -128.662 437.754C-119.137 446.236 -109.471 454.817 -98.098 460.575C-60.762 479.486 -4.038 464.216 25.397 437.994C32.452 431.714 39.888 425.927 47.48 420.31C62.056 409.514 77.041 398.873 88.682 384.802C98.602 372.82 106.236 359.145 111.471 344.495C123.38 311.147 124.706 286.011 112.148 256.685L112.162 256.656Z" fill="#FF8D7C" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-185.565 179.393C-206.182 209.01 -225.07 240.497 -234.678 275.29C-244.286 310.082 -243.841 348.795 -227.076 380.756C-203.035 426.593 -151.54 450.027 -102.798 467.339C-76.269 476.765 -48.429 485.469 -20.45 482.357C24.842 477.322 61.03 442.618 88.47 406.2C108.003 380.28 125.492 351.305 129.255 319.06C135.402 266.363 102.735 215.142 59.466 184.502C-15.584 131.357 -124.766 92.0524 -185.565 179.393Z" fill="#83D398" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M109.472 381.824C102.726 397.736 92.919 412.796 78.879 422.891C61.55 435.362 39.683 439.108 18.867 443.828C-27.182 454.273 -72.682 471.114 -119.888 469.942C-167.094 468.769 -218.259 443.28 -230.243 397.599C-243.37 347.564 -206.275 299.965 -189.235 251.132C-183.114 233.606 -179.322 214.817 -168.663 199.605C-121.578 132.455 -41.054 194.382 14.832 210.492C94.244 233.378 144.983 298.107 109.472 381.824Z" fill="#FFD95D" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M30.912 318.851C30.749 315.93 30.624 313.04 30.576 310.196C29.958 273.17 5.28799 226.824 -41.803 224.004C-69.2606 222.36 -99.9186 222.744 -119.885 238.785C-132.373 248.818 -138.399 263.417 -141.833 277.815C-144.965 290.952 -146.288 304.621 -143.181 317.809C-135.058 352.276 -99.4215 376.378 -66.2564 397.29C-53.7581 405.17 -40.351 413.352 -24.922 414.348C-0.461004 415.927 20.874 398.108 28.094 378.119C34.86 359.393 32.008 338.403 30.912 318.851Z" fill="#88C4D2" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-17.8099 144.026C-0.699936 143.238 10.7691 160.792 18.5401 176.056C57.536 252.652 97.6691 335.457 85.853 420.593C-6.651 435.697 -101.484 436.449 -194.217 422.816C-224.676 418.338 -125.234 297.611 -118.269 286.431C-96.681 251.778 -65.3619 146.225 -17.8099 144.026Z" fill="#C19280" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-107.717 187.463C-84.9246 152.069 -60.9376 116.866 -29.7517 88.5867C1.43333 60.3076 40.8093 39.2027 82.8563 37.1327C110.905 35.7516 142.074 45.0576 156.106 69.3837C164.609 84.1237 165.513 101.936 165.361 118.953C164.7 193.035 147.385 268.051 107.795 330.671C61.9883 403.124 -64.2277 501.333 -157.712 458.708C-261.802 411.245 -145.683 246.421 -107.717 187.463Z" fill="#FFD95D" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-103.836 182.126C-113.568 182.486 -124.228 181.44 -133.172 184.253C-139.844 186.352 -145.07 189.38 -150.744 192.402C-154.931 194.632 -157.994 195.983 -160.41 199.438C-163.028 203.181 -165.391 207.765 -167.307 211.698C-169.969 217.163 -168.496 222.764 -167.802 228.438C-167.4 231.725 -168.432 234.572 -165.648 237.542C-164.776 238.472 -163.134 239.159 -162.197 240.082C-161.21 241.056 -160.958 242.532 -159.859 243.417C-157.501 245.316 -152.168 245.058 -150.261 246.921C-148.373 248.767 -149.717 252.158 -149.87 254.361C-150.621 265.174 -153.931 277.023 -146.755 287.274C-143.75 291.566 -143.256 296.802 -142.239 301.403C-141.604 304.282 -139.801 306.758 -138.055 309.424C-136.722 311.463 -135.364 313.479 -134.844 315.682C-134.054 319.031 -135.492 318.884 -136.457 321.12C-138.832 326.618 -143.267 332.171 -144.891 337.968C-146.645 344.225 -147.452 350.297 -147.887 356.83C-148.371 364.105 -149.191 370.871 -142.801 377.479C-139.014 381.394 -133.741 384.56 -129.978 388.565C-126.203 392.583 -122.656 394.913 -117.037 397.844C-110.806 401.095 -103.788 403.496 -96.8513 405.984C-89.2792 408.701 -81.074 410.005 -73.7794 413.059C-65.3345 416.594 -56.9984 418.714 -47.709 420.94C-38.0138 423.264 -31.7569 424.978 -21.7653 424.3C-7.67533 423.344 6.70647 421.391 18.9186 416.632C25.0002 414.262 30.4506 411.183 34.6537 407.354C39.0934 403.309 40.4415 398.629 43.7957 394.264C44.5682 393.26 44.8905 392.275 44.9016 391.342C44.994 391.075 45.0833 390.806 45.1719 390.537C47.4444 387.358 49.2973 383.897 51.0259 380.135C54.8952 371.714 59.2107 363.682 59.7807 354.73C60.5577 342.52 60.8261 330.946 53.2193 319.293C47.7706 310.946 44.9891 303.117 41.8863 294.3C37.7581 282.57 30.1099 269.965 29.1463 257.871C28.9475 255.375 29.5216 253.198 27.8862 250.824C24.296 245.608 17.9075 240.776 13.0886 235.993C1.84521 224.831 -8.7906 214.069 -25.8731 206.717C-33.6955 203.349 -41.4839 200.216 -48.7958 196.272C-55.2242 192.804 -61.2956 188.086 -68.7509 185.695C-80.0229 182.079 -91.9491 181.686 -103.836 182.126Z" fill="#FFB54E" />
              <path className={`svgImageElement ${s.SVGimage}`} d="M-152.238 356.082C-118.767 413.918 -31.9458 435.727 17.7251 391.521C55.7309 357.698 62.6339 301.225 67 250.08C41.8716 243.217 17.5627 262.622 -0.0767438 282.057C-17.7172 301.493 -36.7705 324.027 -62.7311 325.814C-81.1964 298.309 -61.211 260.837 -37.3787 237.987C-13.5453 215.137 16.5139 193.785 22.0816 160.972C22.9733 155.721 23.0868 149.995 20.3959 145.421C15.2994 136.76 3.26813 136.31 -6.5977 137.46C-113.4 149.919 -221.25 236.835 -152.238 356.082Z" fill="#ADDBD0" />
              <defs>
                <clipPath id="clip0_7_5">
                  <rect width="1920" height="1080" fill="white" />
                </clipPath>
              </defs>
            </svg>
            <Image
              className={`image-${i} ${s.image}`}
              src={`/work/${id}.webp`} // Ensure this path is correct
              alt="image"
              height={2000}
              width={2000}
              loading="lazy"
            />
            <div
              onPointerEnter={workHeadingPointerEnter}
              onPointerLeave={workHeadingPointerLeave}
            >
              <h2 className={`heading-${i}`}>{name}</h2>
              <h2 className={`heading-${i}`} data-stroke>
                {name}
              </h2>
            </div>
          </Link>
        ))}
      </div>
    </section>
  );
};

export default Work;
